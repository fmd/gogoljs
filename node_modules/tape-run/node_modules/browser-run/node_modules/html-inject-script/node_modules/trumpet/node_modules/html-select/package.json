{
  "name": "html-select",
  "version": "2.3.24",
  "description": "match a tokenized html stream with css selectors",
  "main": "index.js",
  "bin": {
    "html-select": "bin/cmd.js"
  },
  "dependencies": {
    "inherits": "^2.0.1",
    "through2": "^1.0.0",
    "cssauron": "^1.1.0",
    "readable-stream": "^1.0.27-1",
    "duplexer2": "~0.0.2",
    "minimist": "~0.0.8",
    "split": "~0.3.0",
    "stream-splicer": "^1.2.0"
  },
  "devDependencies": {
    "concat-stream": "^1.4.6",
    "html-tokenize": "^1.0.0",
    "tape": "^2.13.0",
    "dev-null": "~0.1.1"
  },
  "scripts": {
    "test": "tape test/*.js"
  },
  "repository": {
    "type": "git",
    "url": "git://github.com/substack/html-select.git"
  },
  "homepage": "https://github.com/substack/html-select",
  "keywords": [
    "html",
    "parser",
    "css",
    "selector",
    "stream"
  ],
  "author": {
    "name": "James Halliday",
    "email": "mail@substack.net",
    "url": "http://substack.net"
  },
  "license": "MIT",
  "readme": "# html-select\n\nmatch and splice a tokenized html stream with css selectors\n\n[![build status](https://secure.travis-ci.org/substack/html-select.png)](http://travis-ci.org/substack/html-select)\n\n# example\n\n## readable stream\n\nGiven a tokenized stream from\n[html-tokenize](https://npmjs.org/package/html-tokenize), this program will\nprint the dt tags matching the selector `'ul > li dt'`:\n\n``` js\nvar select = require('html-select');\nvar tokenize = require('html-tokenize');\nvar fs = require('fs');\n\nvar s = select('ul > li dt', function (e) {\n    console.log('*** MATCH ***');\n    e.createReadStream().on('data', function (row) {\n        console.log([ row[0], row[1].toString() ]);\n    });\n});\nfs.createReadStream(__dirname + '/page.html').pipe(tokenize()).pipe(s);\ns.resume();\n```\n\nThe `s.resume()` is necesary to put the stream into flow mode since we aren't\ndoing anything with the output of `s`.\n\nNow this html input:\n\n``` html\n<html>\n  <head>\n    <title>presentation examples</title>\n  </head>\n  <body>\n    <h1>hello there!</h1>\n    <p>\n      This presentation contains these examples:\n    </p>\n    \n    <ul>\n      <li>\n        <dt>browserify</dt>\n        <dd>node-style <code>require()</code> in the browser</dd>\n      </li>\n      \n      <li>\n        <dt>streams</dt>\n        <dd>shuffle data around with backpressure</dd>\n      </li>\n      \n      <li>\n        <dt>ndarray</dt>\n        <dd>n-dimensional matricies on top of typed arrays</dd>\n      </li>\n      \n      <li>\n        <dt>music</dt>\n        <dd>make music with code</dd>\n      </li>\n      \n      <li>\n        <dt>voxeljs</dt>\n        <dd>make minecraft-style games in webgl</dd>\n      </li>\n      \n      <li>\n        <dt>trumpet</dt>\n        <dd>transform html with css selectors and streams</dd>\n      </li>\n    </ul>\n  </body>\n</html>\n```\n\ngives this output:\n\n```\n*** MATCH ***\n[ 'open', '<dt>' ]\n[ 'text', 'browserify' ]\n[ 'close', '</dt>' ]\n*** MATCH ***\n[ 'open', '<dt>' ]\n[ 'text', 'streams' ]\n[ 'close', '</dt>' ]\n*** MATCH ***\n[ 'open', '<dt>' ]\n[ 'text', 'ndarray' ]\n[ 'close', '</dt>' ]\n*** MATCH ***\n[ 'open', '<dt>' ]\n[ 'text', 'music' ]\n[ 'close', '</dt>' ]\n*** MATCH ***\n[ 'open', '<dt>' ]\n[ 'text', 'voxeljs' ]\n[ 'close', '</dt>' ]\n*** MATCH ***\n[ 'open', '<dt>' ]\n[ 'text', 'trumpet' ]\n[ 'close', '</dt>' ]\n```\n\n## transform\n\nUsing the same html file from the previous example,\nthis script converts everything inside `dt` elements to uppercase:\n\n``` js\nvar select = require('html-select');\nvar tokenize = require('html-tokenize');\nvar through = require('through2');\nvar fs = require('fs');\n\nvar s = select('dt', function (e) {\n    var tr = through.obj(function (row, buf, next) {\n        this.push([ row[0], String(row[1]).toUpperCase() ]);\n        next();\n    });\n    tr.pipe(e.createStream()).pipe(tr);\n});\n\nfs.createReadStream(__dirname + '/page.html')\n    .pipe(tokenize())\n    .pipe(s)\n    .pipe(through.obj(function (row, buf, next) {\n        this.push(row[1]);\n        next();\n    }))\n    .pipe(process.stdout)\n;\n```\n\nRunning the transform program yields this html output:\n\n``` html\n<html>\n  <head>\n    <title>presentation examples</title>\n  </head>\n  <body>\n    <h1>hello there!</h1>\n    <p>\n      This presentation contains these examples:\n    </p>\n    \n    <ul>\n      <li>\n        <DT>BROWSERIFY</DT>\n        <dd>node-style <code>require()</code> in the browser</dd>\n      </li>\n      \n      <li>\n        <DT>STREAMS</DT>\n        <dd>shuffle data around with backpressure</dd>\n      </li>\n      \n      <li>\n        <DT>NDARRAY</DT>\n        <dd>n-dimensional matricies on top of typed arrays</dd>\n      </li>\n      \n      <li>\n        <DT>MUSIC</DT>\n        <dd>make music with code</dd>\n      </li>\n      \n      <li>\n        <DT>VOXELJS</DT>\n        <dd>make minecraft-style games in webgl</dd>\n      </li>\n      \n      <li>\n        <DT>TRUMPET</DT>\n        <dd>transform html with css selectors and streams</dd>\n      </li>\n    </ul>\n  </body>\n</html>\n```\n\n# methods\n\n``` js\nvar select = require('html-select')\n```\n\n## var sel = select(selector, cb)\n\nCreate a new html selector transform stream `sel`.\n\n`sel` expects [tokenized html objects](https://npmjs.org/package/html-tokenize)\nas input and writes tokenized html objects as output.\n\nIf `selector` and `cb` are given, `sel.select(selector, cb)` is called\nautomatically.\n\n## sel.select(selector, cb)\n\nRegister a callback `cb(elem)` to fire whenever the css `selector` string\nmatches.\n\n## elem.createReadStream(opts)\n\nCreate a readable object mode stream at the selector. The readable stream\ncontains all the matching tokenized html objects including the element that\nmatched and its closing tag.\n\nIf `opts.inner` is true, only read the inner content. Otherwrite read the outer\ncontent.\n\n## elem.createWriteStream(opts)\n\nCreate a writable object mode stream at the selector. The writable stream writes\ninto the document stream at the selector, replacing the existing content.\n\nIf `opts.inner` is true, only write to the inner content. Otherwrite write to\nthe outer content.\n\n## elem.createStream(opts)\n\nCreate a duplex object mode stream at the selector. The writable side will write\ninto the document stream  at the selector, replacing the existing content. The\nreadable side contains the existing content.\n\nIf `opts.inner` is true, only read and write to the inner content. Otherwrite\nread and write to the outer content.\n\n## elem.setAttribute(key, value)\n\nSet an attribute named by `key` to `value`.\n\nIf `value` is `true`, the attribute will appear without an equal sign in the\nmarkup.\n\n## elem.removeAttribute(key)\n\nRemove an attribute named by `key`.\n\n## elem.getAttribute(key)\n\nReturn an object with a single attribute value named by `key`.\n\n## elem.getAttributes()\n\nReturn an object with all attributes.\n\n# properties\n\n## elem.name\n\nThe string name of the tag.\n\n# events\n\n## elem.on('close', function () {})\n\nWhen a matched element is closed for reading and writing, this event fires.\n\n# usage\n\n```\nusage: html-select SELECTOR OPTIONS\n\n  Given a newline-separated json stream of html tokenize output on stdin,\n  print content below matching html tokens as json on stdout.\n\nOPTIONS are:\n\n  -r, --raw   Instead of printing html token data as json, print the html\n              directly.\n\n```\n\n# supported css selectors\n\nInternally html-select uses [cssauron](https://npmjs.org/package/cssauron).\n\n# install\n\nWith [npm](https://npmjs.org) do:\n\n```\nnpm install html-select\n```\n\nto get the library or\n\n```\nnpm install -g html-select\n```\n\nto get the command-line program.\n\n# license\n\nMIT\n",
  "readmeFilename": "readme.markdown",
  "bugs": {
    "url": "https://github.com/substack/html-select/issues"
  },
  "_id": "html-select@2.3.24",
  "_shasum": "46ad6d712e732cf31c6739d5d0110a5fabf17585",
  "_from": "html-select@^2.3.5",
  "_resolved": "https://registry.npmjs.org/html-select/-/html-select-2.3.24.tgz"
}

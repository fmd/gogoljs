{
  "name": "browser-run",
  "description": "Transform stream that executes JavaScript it receives in a real browser and outputs console output",
  "version": "2.6.2",
  "repository": {
    "type": "git",
    "url": "git://github.com/juliangruber/browser-run.git"
  },
  "homepage": "https://github.com/juliangruber/browser-run",
  "main": "index.js",
  "bin": {
    "browser-run": "./bin/bin.js"
  },
  "scripts": {
    "prepublish": "make build",
    "test": "make test"
  },
  "dependencies": {
    "browser-launcher": "0.3.5",
    "duplexer": "0.0.3",
    "ecstatic": "1.1.0",
    "enstore": "0.0.2",
    "html-inject-script": "1.1.0",
    "optimist": "0.6.1",
    "phantomjs-stream": "1.1.1",
    "source-map-support": "0.3.2",
    "through": "2.2.7",
    "xhr-write-stream": "0.1.2"
  },
  "devDependencies": {
    "babel": "^5.8.23",
    "browserify": "5.9.3",
    "tap": "2.0.0",
    "utf8-stream": "0.0.0"
  },
  "keywords": [
    "browser",
    "stream",
    "phantomjs",
    "test",
    "headless",
    "duplex"
  ],
  "author": {
    "name": "Julian Gruber",
    "email": "mail@juliangruber.com",
    "url": "http://juliangruber.com"
  },
  "license": "MIT",
  "readme": "# browser-run\n\nThe easiest way of running code in a browser environment.\n\n[![build status](https://secure.travis-ci.org/juliangruber/browser-run.svg)](http://travis-ci.org/juliangruber/browser-run)\n\n## Usage\n\n```bash\n$ echo \"console.log('Hey from ' + location); window.close()\" | browser-run\nHey from http://localhost:53227/\n$\n```\n\nOr use `browser-run` programmatically:\n\n```js\nvar run = require('browser-run');\n\nvar browser = run();\nbrowser.pipe(process.stdout);\nbrowser.end('console.log(location); window.close()');\n```\n\n## Example with browserify\n\n```bash\n$ browserify main.js | browser-run\n```\n\nor\n\n```js\nvar browserify = require('browserify');\nvar browser = require('browser-run');\n\nbrowserify('main.js').bundle().pipe(browser()).pipe(process.stdout);\n```\n\n## CLI\n\n```bash\n$ browser-run --help\nRun JavaScript in a browser.\nWrite code to stdin and receive console output on stdout.\nUsage: browser-run [OPTIONS]\n\nOptions:\n  --browser, -b  Browser to use. Available if installed: chrome, firefox, ie, phantom, safari  [default: \"phantom\"]\n  --port, -p     Starts listening on that port and waits for you to open a browser\n  --static, -s   Serve static assets from this directory\n  --input, -i    Input type. Defaults to 'javascript', can be set to 'html'.  \n  --help, -h     Print help\n\n```\n\n## Custom html file\n\nBy using `-input html` or `{ input: 'html' }` you can provide a custom html file for browser-run to use. Keep in mind though that it always needs to have `<script src=\"/reporter.js\"></script>` above other script tags so browser-run is able to properly forward your `console.log`s etc to the terminal.\n\n## API\n\n### run([opts])\n\nReturns a duplex stream and starts a webserver.\n\n`opts` can be:\n\n* `port`: If speficied, no browser will be started, so you can point one yourself to `http://localhost/<port>`\n* `browser`: Browser to use. Defaults to `phantom`. Available if installed:\n  * `chrome`\n  * `firefox`\n  * `ie`\n  * `phantom`\n  * `safari`\n* `static`: Serve static files from this directory\n* `input`: Input type. Defaults to `javascript`, can be set to `html`.\n\nIf only an empty string is written to it, an error will be thrown as there is nothing to execute.\n\nIf you call `window.close()` inside the script, the browser will exit.\n\n### run#stop()\n\nStop the underlying webserver.\n\n## Installation\n\nWith [npm](http://npmjs.org) do\n\n```bash\n$ npm install browser-run    # for library\n$ npm install -g browser-run # for cli\n```\n\n## License\n\n(MIT)\n",
  "readmeFilename": "README.md",
  "bugs": {
    "url": "https://github.com/juliangruber/browser-run/issues"
  },
  "_id": "browser-run@2.6.2",
  "_shasum": "1c8054b894f642e9c6faf3f86feb08d9b395dc06",
  "_from": "browser-run@^2.0.0",
  "_resolved": "https://registry.npmjs.org/browser-run/-/browser-run-2.6.2.tgz"
}

{
  "name": "tap-parser",
  "version": "0.0.2",
  "description": "parse the test anything protocol",
  "main": "index.js",
  "dependencies": {
    "split": "~0.1.2"
  },
  "devDependencies": {
    "tap": "~0.3.0",
    "tape": "~0.2.0"
  },
  "scripts": {
    "test": "tap test/*.js"
  },
  "testling": {
    "files": "test/*.js",
    "browsers": [
      "ie/8",
      "ie/9",
      "chrome/23",
      "firefox/17",
      "opera/12",
      "safari/5.1"
    ]
  },
  "repository": {
    "type": "git",
    "url": "git://github.com/substack/tap-parser.git"
  },
  "homepage": "https://github.com/substack/tap-parser",
  "keywords": [
    "tap",
    "test",
    "parser"
  ],
  "author": {
    "name": "James Halliday",
    "email": "mail@substack.net",
    "url": "http://substack.net"
  },
  "license": "MIT",
  "readme": "# tap-parser\n\nparse the [test anything protocol](http://testanything.org/)\n\n[![build status](https://secure.travis-ci.org/substack/tap-parser.png)](http://travis-ci.org/substack/tap-parser)\n\n[![browser support](http://ci.testling.com/substack/tap-parser.png)](http://ci.testling.com/substack/tap-parser)\n\n# example\n\n``` js\nvar parser = require('tap-parser');\nvar p = parser(function (results) {\n    console.dir(results);\n});\n\nprocess.stdin.pipe(p);\nprocess.stdin.resume();\n```\n\ngiven some [TAP](http://testanything.org/)-formatted input:\n\n```\n$ node test.js\nTAP version 13\n# beep\nok 1 should be equal\nok 2 should be equivalent\n# boop\nok 3 should be equal\nok 4 (unnamed assert)\n\n1..4\n# tests 4\n# pass  4\n\n# ok\n```\n\nparse the output:\n\n```\n$ node test.js | node parse.js\n{ ok: true,\n  asserts: \n   [ { ok: true, number: 1, name: 'should be equal' },\n     { ok: true, number: 2, name: 'should be equivalent' },\n     { ok: true, number: 3, name: 'should be equal' },\n     { ok: true, number: 4, name: '(unnamed assert)' } ],\n  pass: \n   [ { ok: true, number: 1, name: 'should be equal' },\n     { ok: true, number: 2, name: 'should be equivalent' },\n     { ok: true, number: 3, name: 'should be equal' },\n     { ok: true, number: 4, name: '(unnamed assert)' } ],\n  fail: [],\n  errors: [],\n  plan: { start: 1, end: 4 } }\n```\n\n# methods\n\n``` js\nvar parser = require('tap-parser')\n```\n\n## var p = parser(cb)\n\nReturn a writable stream `p` that emits parse events.\n\nIf `cb` is given it will listen for the `'results'` event.\n\n# events\n\n## p.on('results', function (results) {})\n\n`results.errors` is an array containing any parse errors, such as out of order\nassertions or missing plans.\n\n## p.on('assert', function (assert) {})\n\nEvery `/^(not )?ok\\b/` line will emit an `'assert'` event.\n\nEvery `assert` object has these keys:\n\n`assert.ok` - true if the assertion succeeded, false if failed\n`assert.number` - the assertion number\n`assert.name` - optional short description of the assertion\n\n## p.on('comment', function (comment) {})\n\nEvery `/^# (.+)/` line will emit the string contents of `comment`.\n\n## p.on('plan', function (plan) {})\n\nEvery `/^\\d+\\.\\.\\d+/` line emits a `'plan'` event for the test numbers\n`plan.start` through `plan.end`, inclusive.\n\n## p.on('version', function (version) {})\n\nA `/^TAP version (\\d+)/` line emits a `'version'` event with a version number or\nstring.\n\n# install\n\nWith [npm](https://npmjs.org) do:\n\n```\nnpm install tap-parser\n```\n\nYou can use [browserify](http://browserify.org) to `require('tap-parser')` in\nthe browser.\n\n# license\n\nMIT\n",
  "readmeFilename": "readme.markdown",
  "bugs": {
    "url": "https://github.com/substack/tap-parser/issues"
  },
  "_id": "tap-parser@0.0.2",
  "_shasum": "f5f020f36a90596d17c1f85c1d43ac81e2f46292",
  "_from": "tap-parser@~0.0.2",
  "_resolved": "https://registry.npmjs.org/tap-parser/-/tap-parser-0.0.2.tgz"
}
